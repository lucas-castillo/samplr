}
df <- data.frame(x = xxRange, y = yyRange, density = density)
return(df)
}
mapDensityC <- function(names, params, weights, start, size, cellsPerRow = 50){
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
density <- xxRange
df <- data.frame(x = xxRange, y = yyRange, density = density)
return(df)
}
mapDensityC <- function(names, params, weights, start, size, cellsPerRow = 50){
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
density <- samplr::gridDensity(names, params, length(names) > 1, weights, xxRange, yyRange, cellsPerRow)
df <- data.frame(x = xxRange, y = yyRange, density = density)
return(df)
}
bench::mark(
mapDensityR(pdf = pd_func, start = c(-10,-10), size = 20, cellsPerRow = 150),
mapDensityC(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
)
bench::mark(
mapDensityR(pdf = pd_func, start = c(-10,-10), size = 20, cellsPerRow = 150),
mapDensityC(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150),
check = FALSE
)
library(samplr)
library(samplr)
library(samplr)
set.seed(1)
# Create a matrix with the means of 15 different Gaussians
names <- rep("mvnorm", 15)
parameters <- list()
for (i in 1:15){
parameters[[i]] <- list(runif(2) * 18 - 9, diag(2))
}
weights <- runif(15)
weights <- weights / rep(sum(weights), 15)
pd_func <- function(x, log = FALSE){
densities <- vector()
for (i in 1:length(weights)){
densities[i] <- mvtnorm::dmvnorm(x, mean = parameters[[i]][[1]], sigma = diag(2), log = log)
}
return(sum(densities * weights))
}
mapDensityR <- function(pdf, start, size, cellsPerRow = 50){
# start is a vector <- c(x, y)
# size is a number n so that the map ranges from x, y to x + n, y + n
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
density <- vector()
for (i in 1:length(yyRange)){
density[i] <- pdf(c(xxRange[i],yyRange[i]))
}
df <- data.frame(x = xxRange, y = yyRange, density = density)
return(df)
}
getDensityGrid <- function(names, params, weights, start, size, cellsPerRow = 50){
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
density <- samplr::gridDensity(names, params, length(names) > 1, weights, xxRange, yyRange, cellsPerRow)
df <- data.frame(x = xxRange, y = yyRange, density = density)
return(df)
}
mapDensityC(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
df_hills <- mapDensityC(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
df_hills <- samplr::getDensityGrid(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
library(ggplot2)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
hills_df <- samplr::getDensityGrid(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
library(ggplot2)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
print(hill_map)
library(samplr)
library(ggplot2)
library(stats)
hills_df <- getDensityGrid(names, parameters, weights, c(-10,-10), 20, 150)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) #+
# scale_fill_viridis_c() +
# theme_void()
print(hill_map)
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
pkgdown::build_site()
set.seed(1)
# Create a matrix with the means of 15 different Gaussians
names <- rep("mvnorm", 15)
parameters <- list()
for (i in 1:15){
parameters[[i]] <- list(runif(2) * 18 - 9, diag(2))
}
weights <- runif(15)
weights <- weights / rep(sum(weights), 15)
hills_df <- samplr::getDensityGrid(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
library(ggplot2)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
print(hill_map)
sampler_hmc(names, parameters, c(-5,-5), epsilon = .5, L = 10)
X <- sampler_hmc(names, parameters, c(-5,-5), epsilon = .5, L = 10, weights = weights)
HMC <- sampler_hmc(names, parameters, c(-5,-5), epsilon = .5, L = 10, weights = weights)
HMC_df <- data.frame(x = HMC[[1]][,1], y = HMC[[1]][,2])
plotPath(HMC_df)
plotPath <- function(df){
path <- hill_map +
geom_path(df, mapping = aes(x,y), colour = "red", linetype = "dashed", size = .3) +
geom_point(df, mapping = aes(x,y), colour = "white",size =.1)
print(path)
}
set.seed(1)
# Create a matrix with the means of 15 different Gaussians
names <- rep("mvnorm", 15)
parameters <- list()
for (i in 1:15){
parameters[[i]] <- list(runif(2) * 18 - 9, diag(2))
}
weights <- runif(15)
weights <- weights / rep(sum(weights), 15)
hills_df <- samplr::getDensityGrid(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
library(ggplot2)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
print(hill_map)
HMC <- sampler_hmc(names, parameters, c(-5,-5), epsilon = .5, L = 10, weights = weights)
HMC_df <- data.frame(x = HMC[[1]][,1], y = HMC[[1]][,2])
plotPath(HMC_df)
HMC <- sampler_hmc(names, parameters, c(-5,-5), epsilon = .5, L = 100, weights = weights)
HMC_df <- data.frame(x = HMC[[1]][,1], y = HMC[[1]][,2])
plotPath(HMC_df)
HMC <- sampler_hmc(names, parameters, c(-5,-5), epsilon = 1, L = 50, weights = weights)
HMC_df <- data.frame(x = HMC[[1]][,1], y = HMC[[1]][,2])
plotPath(HMC_df)
set.seed(1)
# Create a matrix with the means of 15 different Gaussians
names <- rep("mvnorm", 15)
parameters <- list()
for (i in 1:15){
parameters[[i]] <- list(runif(2) * 18 - 9, diag(2))
}
weights <- runif(15)
weights <- weights / rep(sum(weights), 15)
hills_df <- samplr::getDensityGrid(names = names, params = parameters, weights = weights, start = c(-10,-10), size = 20, cellsPerRow = 150)
library(ggplot2)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
library(samplr)
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
start = c(-5,-5)
size = 20
cellsPerRow = 150
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
testDensity(xxRange, yyRange, cellsPerRow)
df <- testDensity(xxRange, yyRange, cellsPerRow)
density <- testDensity(xxRange, yyRange, cellsPerRow)
df <- data.frame(x = xxRange, y = yyRange, density = density)
library(ggplot2)
start = c(-5,-5)
size = 20
cellsPerRow = 150
xRange <- seq(from = start[1], to = start[1] + size, length.out = cellsPerRow)
xxRange <- rep(xRange, cellsPerRow)
yRange <- seq(from = start[2], to = start[2] + size, length.out = cellsPerRow)
for (i in 1:cellsPerRow){
if (i == 1){
yyRange <- rep(yRange[i], cellsPerRow)
} else {
yyRange <- c(yyRange, rep(yRange[i], cellsPerRow))
}
}
density <- testDensity(xxRange, yyRange, cellsPerRow)
df <- data.frame(x = xxRange, y = yyRange, density = density)
df
density <- testDensity(xxRange, yyRange, cellsPerRow)
hills_df <- data.frame(x = xxRange, y = yyRange, density = density)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
hill_map
path.expand("~")
usethis::edit_r_makevars()
usethis::edit_r_makevars()
library(samplr)
library(samplr)
library(samplr)
?Rcpp::cppFunction("")
Rcpp::cppFunction("")
fib <- Rcpp::cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
usethis::edit_r_makevars()
fib <- Rcpp::cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
library(samplr)
fib <- Rcpp::cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
fib(2)
fib(20)
fib(1)
fib(2)
fib(3)
fib(4)
fib(5)
fib <- Rcpp::cppFunction(
'NumericVector density(NumericVector xxRange, NumericVector yyRange, int cellsPerRow) {
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
}
NumericVector density(yyRange.size());
for (int i = 0; i <yyRange.size(); i++){
density(i) = pdf(NumericVector::create(xxRange[i],yyRange[i]));
}
return density;
}')
fib <- Rcpp::cppFunction(
'NumericVector density(NumericVector xxRange, NumericVector yyRange, int cellsPerRow) {
typedef std::function<double(NumericVector)> dfunc;
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
}
NumericVector density(yyRange.size());
for (int i = 0; i <yyRange.size(); i++){
density(i) = pdf(NumericVector::create(xxRange[i],yyRange[i]));
}
return density;
}')
fib <- Rcpp::cppFunction(
'NumericVector density(NumericVector xxRange, NumericVector yyRange, int cellsPerRow) {
typedef std::function<double(NumericVector)> dfunc;
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
};
NumericVector density(yyRange.size());
for (int i = 0; i <yyRange.size(); i++){
density(i) = pdf(NumericVector::create(xxRange[i],yyRange[i]));
}
return density;
}')
density <- fib(xxRange, yyRange, cellsPerRow)
hills_df <- data.frame(x = xxRange, y = yyRange, density = density)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
hill_map
density <- testDensity(xxRange, yyRange, cellsPerRow)
hills_df <- data.frame(x = xxRange, y = yyRange, density = density)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
hill_map
fib <- Rcpp::cppFunction(
'NumericVector density(NumericVector xxRange, NumericVector yyRange, int cellsPerRow) {
typedef std::function<double(NumericVector)> dfunc;
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
};
NumericVector density(yyRange.size());
for (int i = 0; i <yyRange.size(); i++){
density(i) = pdf(NumericVector::create(xxRange[i],yyRange[i]));
}
return density;
}')
density <- fib(xxRange, yyRange, cellsPerRow)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
hills_df <- data.frame(x = xxRange, y = yyRange, density = density)
hill_map <- ggplot(hills_df) +
geom_raster(mapping = aes(x = x, y = y, fill = density)) +
scale_fill_viridis_c() +
theme_void()
hill_map
custom_mcmc <- Rcpp::cppFunction(
'List sampler_mcmc_cpp(
NumericVector start,
NumericMatrix sigma_prop,
int iterations,
bool discreteValues,
)
{
typedef std::function<double(NumericVector)> dfunc;
// Initialize variables ---------------------------------
int acceptances = 0;
int n_dim = start.size();
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
};
NumericMatrix chain(iterations, n_dim);
NumericMatrix ps(1, iterations);
// first row is start
chain.row(0) = start;
ps(0,0) = pdf(start);
// Run the sampler ------------------------------------------------
for (int i = 1; i < iterations; i++){
// NumericVector current_x = chain.row(i-1);
NumericVector accept = metropolis_step_cpp(chain, i, ps(0,i-1), sigma_prop, pdf, discreteValues, 1);
ps(0,i) = accept(0);
acceptances += accept(1);
}
return List::create(chain, (double)(acceptances) / (double)(iterations));')
custom_mcmc <- Rcpp::cppFunction(
'List sampler_mcmc_cpp(
NumericVector start,
NumericMatrix sigma_prop,
int iterations,
bool discreteValues,
)
{
typedef std::function<double(NumericVector)> dfunc;
// Initialize variables ---------------------------------
int acceptances = 0;
int n_dim = start.size();
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
};
NumericMatrix chain(iterations, n_dim);
NumericMatrix ps(1, iterations);
// first row is start
chain.row(0) = start;
ps(0,0) = pdf(start);
// Run the sampler ------------------------------------------------
for (int i = 1; i < iterations; i++){
// NumericVector current_x = chain.row(i-1);
NumericVector accept = metropolis_step_cpp(chain, i, ps(0,i-1), sigma_prop, pdf, discreteValues, 1);
ps(0,i) = accept(0);
acceptances += accept(1);
}
return List::create(chain, (double)(acceptances) / (double)(iterations));}')
library(samplr)
custom_mcmc <- Rcpp::cppFunction(depends = c("samplr"),
'List sampler_mcmc_cpp(
NumericVector start,
NumericMatrix sigma_prop,
int iterations,
bool discreteValues,
)
{
typedef std::function<double(NumericVector)> dfunc;
// Initialize variables ---------------------------------
int acceptances = 0;
int n_dim = start.size();
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
};
NumericMatrix chain(iterations, n_dim);
NumericMatrix ps(1, iterations);
// first row is start
chain.row(0) = start;
ps(0,0) = pdf(start);
// Run the sampler ------------------------------------------------
for (int i = 1; i < iterations; i++){
// NumericVector current_x = chain.row(i-1);
NumericVector accept = metropolis_step_cpp(chain, i, ps(0,i-1), sigma_prop, pdf, discreteValues, 1);
ps(0,i) = accept(0);
acceptances += accept(1);
}
return List::create(chain, (double)(acceptances) / (double)(iterations));}')
custom_mcmc <- Rcpp::cppFunction(depends = c("samplr" ,"RcppArmadillo"),
'List sampler_mcmc_cpp(
NumericVector start,
NumericMatrix sigma_prop,
int iterations,
bool discreteValues,
)
{
typedef std::function<double(NumericVector)> dfunc;
// Initialize variables ---------------------------------
int acceptances = 0;
int n_dim = start.size();
dfunc pdf = [](NumericVector x){
if ((x(0) <= 5 && x(0) >= 0) && (x(1) <= 5 && x(1) >= 0)){
return 1;
} else{
return 0;
}
};
NumericMatrix chain(iterations, n_dim);
NumericMatrix ps(1, iterations);
// first row is start
chain.row(0) = start;
ps(0,0) = pdf(start);
// Run the sampler ------------------------------------------------
for (int i = 1; i < iterations; i++){
// NumericVector current_x = chain.row(i-1);
NumericVector accept = metropolis_step_cpp(chain, i, ps(0,i-1), sigma_prop, pdf, discreteValues, 1);
ps(0,i) = accept(0);
acceptances += accept(1);
}
return List::create(chain, (double)(acceptances) / (double)(iterations));}')
custom_mcmc <- Rcpp::cppFunction(depends = c("samplr" ,"RcppArmadillo"),'
int fib(){
return 1;
}')
custom_mcmc()
Rcpp::cpp_object_dummy()
?Rcpp::cpp_object_dummy()
