X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
library(Samplr)
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
library(Samplr)
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1, swap_all = FALSE),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1, iterations = 2 ** 16),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1, swap_all = FALSE),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1, iterations = 2 ** 16),
# iterations = 10
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1, iterations = 2 ** 16),
# iterations = 10
)
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1, iterations = 2 ** 16),
# iterations = 10
)
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(1,1), sigma_prop=diag(2))
Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2) / 8), c(1,1), sigma_prop=diag(2))
Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(1,1), sigma_prop=diag(2) / 8)
Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(1,1), sigma_prop=diag(2) / 10)
Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(1,1), sigma_prop=diag(2) / 10)
Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(1,1), sigma_prop=diag(2) / 10)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(1,1), sigma_prop=diag(2) / 10)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(5,5), sigma_prop=diag(2) / 10)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(5,5), sigma_prop=diag(2) / 10)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,1), diag(2)), c(5,5), sigma_prop=diag(2) / 10, iterations = 2 ** 20)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 10
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
# iterations = 100
)
print(X[,c("expression", "min", "median")])
X <- bench::mark(
Samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
Samplr::sampler_hmc("norm", c(0,1), 1),
Samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
iterations = 1000
)
print(X[,c("expression", "min", "median")])
print(X[,c("expression", "min", "median")])
Samplr::sampler_hmc("mvnorm", list(c(0,0), diag(2)), c(0,1))
X <- Samplr::sampler_hmc("mvnorm", list(c(0,0), diag(2)), c(0,1))
X
X[[1]]
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
Samplr::sampler_mcmc("mvnorm", list(c(0,0), diag(2)), c(0,1))
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,0), diag(2)), c(0,1))
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,0), diag(2)), c(-5,-5))
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,0), diag(2)), c(-10,10))
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_mcmc("mvnorm", list(c(0,0), diag(2)), c(-2,-2))
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- Samplr::sampler_nuts("mvnorm", list(c(0,0), diag(2)), c(-2,-2))
library(samplr)
samplr::check_sigma_prop()
library(samplr)
devtools::document()
devtools:::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
sampler_hmc(distr_name = "norm", distr_params = c(0,1), start = 1, epsilon = .01, L = 100)
X <- sampler_hmc(distr_name = "norm", distr_params = c(0,1), start = 1, epsilon = .01, L = 100)
hist(X[[1]])
samplr::check_sigma_prop()
library(samplr)
devtools::document()
library(samplr)
X <- sampler_mcmc("norm", c(0,1), 1)
plot_all(X[[1]])
library(samplr)
devtools::document()
library(samplr)
X <- sampler_mcmc("norm", c(0,1), 1)
plot_all(X[[1]])
devtools::document()
devtools::document()
library(samplr)
X <- sampler_mcmc("norm", c(0,1), 1)
plot_all(X[[1]])
devtools::build_site()
devtools::build_site()
devtools
devtools::document()
devtools::build()
devtools::build_readme()
devtools::build_readme??
??devtools::build_readme
??devtools::build_rmd()
devtools::build_rmd()
devtools::document()
??devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::load_all(".")
devtools::build_readme()
devtools::build_vignettes("Supported Distributions")
devtools::build_vignettes()
devtools::build_vignettes()
usethis::use_vignette("Supported Distributions")
usethis::use_vignette("supported-distributions")
usethis::use_vignette("time-comparisons")
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
set.seed(1)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(5,-5),
sigma_prop = diag(2) * 1/8
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
sigma_prop = diag(2) * 1/8
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
sigma_prop = diag(2) * 1/8
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
set.seed(1)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
sigma_prop = diag(2) * 1/8
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
set.seed(1)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
sigma_prop = diag(2)
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
sigma_prop = diag(2) * 1/16
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
set.seed(1)
X <- sampler_mcmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
sigma_prop = diag(2) * 1/16
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
X <- sampler_hmc(
distr_name = "mvnorm", # as before
list(c(0,0), diag(2)), # provide distribution parameters as a list for multivariate distributions
start = c(0,0),
)
x <- X[[1]][,1]
y <- X[[1]][,2]
plot(x,y)
pkgdown::build_site()
microbenchmark
devtools::install_github("eddelbuettel/rbenchmark")
rbenchmark::benchmark(sampler_mcmc("norm", c(0,1), 1))
X <- rbenchmark::benchmark(sampler_mcmc("norm", c(0,1), 1))
install.packages("microbenchmark")
X <- microbenchmark::microbenchmark(
SampleR::sampler_mcmc(pdf, 1, sigma_prop = 1),
SampleR::sampler_mc3(pdf, 1, sigma_prop = 1),
SampleR::sampler_hmc(pdf, 1),
SampleR::sampler_nuts(pdf, 1, .5),
)
X <- microbenchmark::microbenchmark(
samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_hmc("norm", c(0,1), 1),
samplr::sampler_nuts("norm", c(0,1), 1),
)
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)})
X
print(X)
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
)
library(samplr)
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
check = FALSE
)
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
)
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)})
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)}
)
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)})
X
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)}
)
X
?microbenchmark::microbenchmark
X <- microbenchmark::microbenchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
unit = "ms"
)
X
?microbenchmark::microbenchmark
X <- rbenchmark::benchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
unit = "ms"
)
X
X <- rbenchmark::benchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
)
X <- rbenchmark::benchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)}
)
X
X
X <- rbenchmark::benchmark(
"Metropolis-Hastings" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"MC3" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"HMC" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NUTS" = {samplr::sampler_nuts("norm", c(0,1), 1)},
columns = c("test", "elapsed")
)
knitr::kable(X)
library(tidyverse)
X <- bench::mark(
samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_hmc("norm", c(0,1), 1),
samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
)
# print(X[,c("expression", "min", "median")])
X %>% unnest() %>% filter(gc == "none")
X <- bench::mark(
samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_hmc("norm", c(0,1), 1),
samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
)
# print(X[,c("expression", "min", "median")])
X %>% unnest()
X <- bench::mark(
samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_hmc("norm", c(0,1), 1),
samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
)
# print(X[,c("expression", "min", "median")])
X %>% pull()
X <- bench::mark(
samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1),
samplr::sampler_hmc("norm", c(0,1), 1),
samplr::sampler_nuts("norm", c(0,1), 1),
check = FALSE,
)
# print(X[,c("expression", "min", "median")])
(function(x)data.frame(Type=names(x), Value=x))(X)
# print(X[,c("expression", "min", "median")])
X
# print(X[,c("expression", "min", "median")])
X[,c("expression, min, median")]
# print(X[,c("expression", "min", "median")])
X[,c("expression", "min", "median")]
# print(X[,c("expression", "min", "median")])
as.data.frame(X[,c("expression", "min", "median")])
as.data.frame(X[,c("expression", "min", "median")])
# print(X[,c("expression", "min", "median")])
knitr::kable(as.data.frame(X[,c("expression", "min", "median")]))
devtools::build_vignettes()
pkgdown::build_articles()
devtools::build_vignettes(clean = TRUE)
devtools::build_vignettes(clean = TRUE)
pkgdown::build_articles()
install.packages("gganimate")
X <- bench::mark(
"NAME" = {samplr::sampler_mcmc("norm", c(0,1), 1, sigma_prop=1)},
"NAME1" = {samplr::sampler_mc3("norm", c(0,1), 1, sigma_prop=1)},
"NAME2" = {samplr::sampler_hmc("norm", c(0,1), 1)},
"NAME3" = {samplr::sampler_nuts("norm", c(0,1), 1)},
check = FALSE,
)
knitr::kable(as.data.frame(X[,c("expression", "min", "median")]))
devtools::build_vignettes()
pkgdown::build_articles()
devtools::build_vignettes()
pkgdown::build_articles()
library(samplr)
abbrev_cont_mv <- c("mvnorm", "mvt")
for (i in 1:length(abbrev_cont_mv)){abbrev_cont_mv[i] <- paste("*", abbrev_cont_mv[i],"*", sep="")}
name_cont_mv <- c("Multivariate Normal", "Multivariate t")
for (i in 1:length(name_cont)){name_cont[i] <- paste(name_cont[i],"Distribution")}
library(samplr)
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_reference()
samplr::sampler_nuts("norm", c(0,1), 1)
samplr::sampler_nuts("mvnorm", list(c(0,0), diag(2)), c(0,0))
samplr::sampler_nuts("norm", c(0,1), 1)
samplr::sampler_nuts("norm", c(0,1), 1)
samplr::sampler_nuts("mvnorm", list(c(0,0), diag(2)), c(0,0))
samplr::sampler_hmc("mvnorm", list(c(0,0), diag(2)), c(0,0))
samplr::sampler_hmc("mvnorm", list(c(0,0), diag(2)), c(0,0))
library(samplr)
library(inline)
library(Rcpp)
f0 <- cxxfunction(signature(a="numeric"), plugin="Rcpp", body='
Rcpp::NumericVector xa(a);
int myvar = 19;
int na = xa.size();
myvar = 27;
Rcpp::NumericVector out1(na);
for(int i=0; i < na; i++) {
out1[i] = 2*xa[i];
myvar++;
}
myvar = 101;
return(Rcpp::List::create( _["out1"] = out1));
')
getLoadedDLLs()
.Call("file3afc2d6546f1",c(-7,0.7,77))
path.expand("~/R")
usethis::edit_r_makevars()
path.expand("~/.R")
?usethis::edit_r_makevars()
?usethis::edit_r_makevars(CXXFLAGS = "-g -O0 -Wall")
usethis::edit_r_makevars(CXXFLAGS = "-g -O0 -Wall")
usethis::edit_r_makevars("CXXFLAGS = -g -O0 -Wall")
usethis::edit_r_makevars()
library(samplr)
samplr::sampler_nuts("mvnorm", list(c(0,0), diag(2)), c(0,0))
devtools::install_github("eddelbuettel/rinside")
?Rcpp::compileAttributes
library(samplr)
usethis::edit_r_makevars()
R --debugger=gdb
RInside::
?RInside
